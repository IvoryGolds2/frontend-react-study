폴더 = 프로젝트 
프로젝트를 열 때는 폴더를 열어야 한다
폴더명은 영어가 좋음 - 나 _ 사용 공백 안씀!	
1. ! + enter  또는 탭 키 입력으로  html 기본 구조 자동 완성--(이름에 .html 붙일 것)
2. 기본 설정 (ctrl + ,) 폰트 사이즈는 각자 알아서 탭사이즈는 2로 변경
3. 파일 생성과 삭제
4. 정리된 코드 만들기 (alt + shift + f) 코드 정렬 기능
처음부터 깔끔하게 작업하는 습관을 들이는 것이 좋음
코드가 지저분하면 가독성이 떨어지고 에러가 발생할 확률 증가
5. 태그 이름 한번에 변경 (설정 -> linked editing)
6. 브라우저 출력하기 (extension좌측 다섯번째 네모네개 : live server 검색해서 설치)
7. 우클릭 오픈 위드 라이브 서버 클릭, 단축키 알트 L + O)

숨은폴더 .git 폴더가 생성이 돼야함 ->git init
브랜치 이름 

1. 커밋 메세지 룰과 작성법
첫번째라인:제목(필수)
두번째라인:공란
세번째라인 부터 내용 작성, 무엇을 왜(선택)- 내용 작성 안해도 커밋 만들어짐
마지막 라인: 꼬리말(#이슈넘버)(선택)

작성법 팁:최대한 구체적으로 작성,  주간 보고에 그대로 쓸 정도로 작성

2. 왜 굳이 git add -> commit 두 단계에 걸쳐서 하는지?
모든 파일을 굳이 다 기록할 필요가 없기 때문.
혹은 버전을 여러 개로 나눠서 만들고 싶은 경우
그래서 git add로 기록할 파일을 먼저 고르는 것 
그 다음  git commit로 버전 생성(기록완료)

3. 커밋 전에 항상 diff 확인하기 (매우 좋은 습관)
명령어는 git diff, git difftool 하지만 보기가 조금 불편하니 그냥 커밋
전에 파일 눌러서 뭐가 생성됐는지 확인하기

4. 언제, 얼마나 커밋 하는게 좋을까?
간단한 기능을 하나 추가 할 때 마다 커밋 하면 됨
ex)회원가입 기능을 만든다고 하면~~
회원 가입 폼 레이아웃  ui를 다 만들면 커밋 하고
입력한 이메일이 맞는지 양식에 맞는지 검증하는 기능(유효성검사)를 만들었으면 또 커밋!
서버에 데이터를 전송하는 기능을 만들었으면 커밋커밋

대충 이런식으로 작은 작업 하나를 마칠때마다 커밋하는게 좋음 
근데 다 만들고 해도됨 ㅎㅎ 하지만 하루 한개 이상 커밋 하는게 좋은습관임

5. CLI(command line interface 명령창) 명령어 기반 vs GUI 툴 비교
명령어를 쓰면 깃에 관련된 모든 기능 사용 가능 GUI 툴은 툴 자체에 구현된 기능만 쓸 수 있음 

6. git push -u origin main
-u옵션은 방금 입력한 주소를 기억해라 라는 뜻 
처음 한번만 쓰는 것 
그 다음부터는 주소를 길게 입력 할 필요 없이  git push 만 입력하면 됨awe

7.git remote -v
원격저장소 정보를 보고 싶을 때

8.git clone https://원격저장소 주소
원격 저장소에 올린 프로젝트를 내 로컬에 복제하는 것 (얘도 한번만 하면됨)

9.git pull 원격저장소 주소(origin)
원격 저장소에 있는 모든 브랜치 내용을 가져와서 로컬 저장소에 합치라는 뜻
git pull origin main
특정브랜치 (main)만 가져올 수 있음

(중요) 항상 작업하기 전에 git pull을 받아서 최신 상태로 만들어놓고 작업 시작
참고로 git pull 명령어는 git fetch + git merge를 합친 것
git fetch는 원격 저장소의 최신 내용 (commit)를 받아오는 것
git merge는 그걸 merge(병합)하라는 뜻

10.저장소에 올리지 않을 파일들은 .gitignore
설정파일이나 빌드 산출물, 기타 라이브러리 파일들 등 불필요한 파일들은 올리지 않는것이 좋음
그럴때 .gitignore 파일을 만들어서 올리지 않을 폴더나 파일을 명시하면 됨
그러면 깃에서 해당 폴더랑 파일을 무시해버림

  1) 사이드 바 열고 닫기: ctrl + b
  2) 빠른 열기(파일이나 기호 검색): ctrl + p
  3) 모든 명령 표시(명령 팔레트): ctrl + shift + p 또는 F1
  4) 탭 닫기: ctrl + w, 모든 탭 닫기: ctrl + k + w
<!-- 7. VS Code 단축키 정리
  5) 검색: ctrl + f, 프로젝트 전체 검색: ctrl + shift + f
  6) 바꾸기: ctrl + h
  7) 라인 이동: alt + up/down
  8) 라인 복사: ctrl + c 또는 alt + shift + up/down
  9) 들여쓰기: tab, 내어쓰기: shift + tab
  10) 이전/다음 탭 열기: ctrl + PgUp/PgDn 또는 ctrl + tab
  11) 편집기 분할: ctrl + \ 또는 ctrl + alt + left/right
  12) 다중 선택: ctrl + d 또는 ctrl + alt + up/down 또는 alt + 마우스 클릭/드래그
  13) 라인 삭제: ctrl + shift + k
  주석 단축키 컨트롤 슬래시(html, css, js 모두)-->